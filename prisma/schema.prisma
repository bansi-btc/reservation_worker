// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String         @id @default(uuid())
  firstname    String?
  lastname     String?
  email        String         @unique
  password     String
  role         Role           @default(USER)
  isVerified   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  reservations Reservation[]
}

model Genre {
  id     String  @id @default(uuid())
  name   String  @unique
  movies Movie[]  @relation("MovieGenres")
}

model Movie {
  id          String     @id @default(uuid())
  title       String
  description String
  posterUrl   String
  genres      Genre[]   @relation("MovieGenres")
  showtimes   Showtime[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Showtime {
  id        String   @id @default(uuid())
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   String
  startTime DateTime
  capacity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seats     Seat[]
  reservations Reservation[]
}

model Seat {
  id           String        @id @default(uuid())
  number       Int
  showtime     Showtime      @relation(fields: [showtimeId], references: [id])
  showtimeId   String
  isBooked     Boolean       @default(false)
  reservation  Reservation?  @relation(fields: [reservationId], references: [id])
  reservationId String?
  createdAt    DateTime      @default(now())
  price        Int           @default(0) 

  @@unique([showtimeId, number]) // Ensure seat number uniqueness per showtime
}

model Reservation {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  showtime    Showtime   @relation(fields: [showtimeId], references: [id])
  showtimeId  String
  seats       Seat[]
  createdAt   DateTime   @default(now())
  canceledAt  DateTime?
  bookingJobs BookingJob[]
}

model BookingJob {
  id                    String   @id @default(uuid())
  status                BookingStatus @default(PENDING)
  paymentSessionId      String?  // Stripe session ID
  paymentUrl            String?   // Redirect link to checkout
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  reservationId         String?
  reservation           Reservation? @relation(fields: [reservationId], references: [id])
  message               String? 
}

enum BookingStatus {
  AWAITING_PAYMENT
  PENDING
  SUCCESS
  FAILED
}